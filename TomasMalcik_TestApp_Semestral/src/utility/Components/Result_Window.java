/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package utility.Components;

import GUI.Window;
import static GUI.Window.session;
import java.util.ArrayList;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Transaction;
import db.Results;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;
import utility.Sorts.SortByDate;
import utility.Sorts.SortByDateD;
import utility.Sorts.SortById;
import utility.Sorts.SortByIdD;
import utility.Sorts.SortByPercentage;
import utility.Sorts.SortByPercentageD;
import utility.Sorts.SortByStudentNum;
import utility.Sorts.SortByStudentNumD;
import utility.Sorts.SortByTestName;
import utility.Sorts.SortByTestNameD;
import utility.Sorts.SortByTimer;
import utility.Sorts.SortByTimerD;
import utility.strategy.Settings_load;

/**
 *
 * @author Tomáš Malčík
 */
public class Result_Window extends DefaultPanel {

    List<Results> results;
    
    //sorting booleans
    private boolean sortByID = true;
    private boolean sortByStudentNum = true;
    private boolean sortByTestName = true;
    private boolean sortByPercentage = true;
    private boolean sortByTimer = true;
    private boolean sortByDate = true;
    
    
    
    /**
     * Creates new form Results
     */
    public Result_Window() {
        initComponents();
        //firt initialization of the main panel
        initialize();
        //design table and add listener
        setupTable();
        
        //loads and prints results into table
        results = loadResults();
        printResults();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonUniversal1 = new utility.Components.ButtonUniversal(new Settings_load());

        setMaximumSize(new java.awt.Dimension(1024, 768));
        setMinimumSize(new java.awt.Dimension(1024, 768));

        jPanel1.setBackground(new java.awt.Color(118, 180, 233));
        jPanel1.setMaximumSize(new java.awt.Dimension(1024, 768));
        jPanel1.setMinimumSize(new java.awt.Dimension(1024, 768));

        jPanel2.setBackground(java.awt.Color.white);

        jScrollPane1.setBackground(java.awt.Color.white);
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jTable1.setBackground(java.awt.Color.white);
        jTable1.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(118, 180, 233));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "číslo testu", "název testu", "Studentské číslo", "Procenta", "Doba testu", "Datum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setIntercellSpacing(new java.awt.Dimension(15, 10));
        jTable1.setRowHeight(40);
        jTable1.setRowMargin(10);
        jScrollPane1.setViewportView(jTable1);

        buttonUniversal1.setText("Zpět");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonUniversal1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonUniversal1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //functions
    /**
     * 
     * @return List with objects - each represents one row of selected data from database 
     */
    private List<Results> loadResults() {
        List<Results> u = null;
        Transaction tx = null;
        try{
            //selection
            tx = Window.getInstance().session.beginTransaction();
            Query query = Window.getInstance().session.createQuery("FROM Results");
            
            //creating list
            u = query.list();
            
            //commit of action
            tx.commit();
        }catch(Exception e){
            System.out.println(e.getMessage());
            if(tx !=null){
                //rollback if the transaction is corrupted or badly stated
                tx.rollback();
            }
        }
        return u;
    }
    
    
    /**
     * This function prints results into the jTable
     */
    private void printResults() {
        //creating a model for table
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
   
        //clearing any existing data
        model.setRowCount(0);
        
        //filling in
        for(int i = 0 ;i < this.results.size(); i++) {
           double percentage = this.results.get(i).getPercentage();
            percentage = percentage*100;
            percentage = Math.round(percentage);
            percentage = percentage /100;
            
            long millis = this.results.get(i).getTimer();  // obtained from StopWatch
            long minutes = (millis / 1000)  / 60;
            int seconds = (int)((millis / 1000) % 60);
            
           model.addRow(new Object[]{this.results.get(i).getIdR()+"",
                                     this.results.get(i).getTestName(),
                                     this.results.get(i).getStudentNum(),
                                     percentage+"",
                                     minutes+":"+seconds,
                                     this.results.get(i).getTestDate()
                                    });
        }
    }
    
    /**
     * This function defines the font, color, background and adds a listener for sorting
     */
    private void setupTable() {
        //setup
        this.jTable1.getTableHeader().setFont(new Font("Noto Sans",1,16));
        this.jTable1.getTableHeader().setBackground(new Color(25,94,121));
        this.jTable1.getTableHeader().setForeground(Color.white);   
        
        //adding a listener
        jTable1.getTableHeader().addMouseListener(new MouseAdapter() {
         @Override
            public void mouseClicked(MouseEvent e) {
                int col = jTable1.columnAtPoint(e.getPoint());
                String name = jTable1.getColumnName(col);
                
                if(col == 0) {
                    sortId();
                }else if(col == 1) {
                    sortTestName();
                }else if(col == 2) {
                    sortStudentNum();
                }else if(col == 3) {
                    sortPercentage();
                }else if(col == 4) {
                    sortTimer();
                }else if(col == 5) {
                    sortDate();
                }
                
                printResults();
            }
        });
    }
    
    //sorts - each sort has a boolean value assigned to it so you can sort both descending and ascending
    private void sortId() {
        if(sortByID) {
            Collections.sort(results,new SortById());
            sortByID = !sortByID;
        }else {
            Collections.sort(results,new SortByIdD());
            sortByID = !sortByID;
        }
    }
    private void sortTestName() {
        if(sortByTestName) {
            Collections.sort(results,new SortByTestName());
            sortByTestName = !sortByTestName;
        }else {
            Collections.sort(results,new SortByTestNameD());
            sortByTestName = !sortByTestName;
        }
    }
    private void sortStudentNum() {
        if(sortByStudentNum) {
            Collections.sort(results,new SortByStudentNum());
            sortByStudentNum = !sortByStudentNum;
        }else {
            Collections.sort(results,new SortByStudentNumD());
            sortByStudentNum = !sortByStudentNum;
        }
    }
    private void sortPercentage() {
        if(sortByPercentage) {
            Collections.sort(results,new SortByPercentage());
            sortByPercentage = !sortByPercentage;
        }else {
            Collections.sort(results,new SortByPercentageD());
            sortByPercentage = !sortByPercentage;
        }
    }
    private void sortTimer() {
        if(sortByTimer) {
            Collections.sort(results,new SortByTimer());
            sortByTimer = !sortByTimer;
        }else {
            Collections.sort(results,new SortByTimerD());
            sortByTimer = !sortByTimer;
        }
    }
    private void sortDate() {
        if(sortByDate) {
            Collections.sort(results,new SortByDate());
            sortByDate = !sortByDate;
        }else {
            Collections.sort(results,new SortByDateD());
            sortByDate = !sortByDate;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private utility.Components.ButtonUniversal buttonUniversal1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    
    //testing function
    private void displayResults() {
        for (int i = 0; i < this.results.size(); i++) {
            System.out.println(results.get(i).getStudentNum()+" "+ results.get(i).getPercentage());
        }
    }
}
